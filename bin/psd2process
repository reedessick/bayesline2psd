#!/usr/bin/env python

__usage__ = "psd2process [--options] psd.txt [psd.txt ...]"
__doc__ = "a script that picks up frequency arrays representing PSDs from disk and generates some basic summary information"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from optparse import OptionParser

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('', '--callout', default=None, type='string',
    help='the path to a frequency array that you want plotted as a callout')

parser.add_option('', '--ylim', nargs=2, type='float', default=None)
parser.add_option('', '--xlim', nargs=2, type='float', default=None)

parser.add_option('', '--level', default=[], action='append', type='float',
    help='confidence levels for process plot. \
DEFAULT=[0.1, 0.5, 0.9]')

parser.add_option('', '--stack', default=False, action='store_true',
    help='plot all the samples on the same axes instead of just quantiles')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args), 'please supply at least 1 input argument\n%s'%__usage__

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

if not opts.level:
    opts.level = [0.1, 0.5, 0.9]

#-------------------------------------------------

### read in data
if opts.verbose:
    print('reading: '+args[0])
freq, p = np.loadtxt(args[0]).transpose()
nfreq = len(freq)
nsamp = len(args)
psds = np.empty((nsamp, nfreq), dtype=float)
psds[0,:] = p

for ind, path in enumerate(args[1:]):
    if opts.verbose:
        print('reading: '+path)
    f, p = np.loadtxt(path).transpose()
    assert np.all(f==freq)
    psds[ind+1,:] = p

if opts.stack:
    if opts.verbose:
        print('plotting')
    fig = plt.figure()
    ax = fig.gca()

    for i in xrange(nsamp):
        ax.plot(freq, psds[i,:], alpha=0.25)

    ax.set_xlabel('frequency')
    ax.set_ylabel('psd')

    ax.grid(True, which='both')

    ax.set_xscale('log')
    ax.set_yscale('log')

    if opts.xlim is not None:
        ax.set_xlim(opts.xlim)
    else:
        ax.set_xlim(xmin=min(freq), xmax=max(freq))
    if opts.ylim is not None:
        ax.set_ylim(opts.ylim)

    figname = '%s/psd2process-stack%s.png'%(opts.output_dir, opts.tag)
    if opts.verbose:
        print('saving: '+figname)
    plt.savefig(figname)
    plt.close(fig)

#------------------------

### compute quantiles
if opts.verbose:
    print('computing quantiles')
quantiles = []
for level in opts.level:
    quantile = np.empty(nfreq, dtype=float)
    for i in xrange(nfreq):
        quantile[i] = np.percentile(psds[:,i], level*100)
    quantiles.append(quantile)

### make a plot
if opts.verbose:
    print('plotting')
fig = plt.figure()
ax = fig.gca()

for level, quantile in zip(opts.level, quantiles):
    ax.plot(freq, quantile, label='%.f'%(level*100), alpha=0.75)

if opts.callout is not None:
    if opts.verbose:
        print('reading callout from: '+opts.callout)
    F, P = np.loadtxt(opts.callout).transpose()
    ax.plot(F, P, color='k', linewidth=2, alpha=0.75)

ax.set_xscale('log')
ax.set_yscale('log')
if opts.xlim is not None:
    ax.set_xlim(opts.xlim)
else:
    ax.set_xlim(xmin=min(freq), xmax=max(freq))

if opts.ylim is not None:
    ax.set_ylim(opts.ylim)

ax.set_xlabel('frequency')
ax.set_ylabel('psd')

ax.grid(True, which='both')
ax.legend(loc='best')

figname = '%s/psd2process-proc%s.png'%(opts.output_dir, opts.tag)
if opts.verbose:
    print('saving: '+figname)
plt.savefig(figname)
plt.close(fig)

#------------------------

### compute distribution of KL Divergences
if opts.verbose:
    print('computing KL divergences')
dkl = []
if opts.xlim is not None:
    truth = (opts.xlim[0]<=freq)*(freq<=opts.xlim[1])
else:
    truth = np.ones_like(freq, dtype=bool)

for i in xrange(nsamp):
    for j in xrange(i+1, nsamp):
        x = 2*np.log(np.abs(psds[i,:]-psds[j,:])) - np.log(psds[i,:]) - np.log(psds[j,:])
        x[psds[i,:]==np.infty] = 0 ### skip points where things diverge. This should be a trivial measure in total
        x[psds[j,:]==np.infty] = 0
        m = np.max(x)

        dkl.append( np.trapz(np.exp(x-m)[truth], freq[truth])*np.exp(m) )

if opts.verbose:
    print('plotting')
fig = plt.figure()
ax = fig.gca()

ax.hist(np.log10(dkl), bins=max(10, int(nsamp**0.5)), histtype='step')

ax.set_xlabel('log10(symmetric KL divergence)')
ax.set_ylabel('count')

ax.grid(True, which='both')

figname = '%s/psd2process-Dkl%s.png'%(opts.output_dir, opts.tag)
if opts.verbose:
    print('saving: '+figname)
plt.savefig(figname)
plt.close(fig)
